spring.application.name=springboot_react_student
server.port=8080

# SMTP 서버 설정 (Gmail)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=fillution1@gmail.com
spring.mail.password=yxtdfivpiakvnffd

# SMTP 인증 및 보안 설정
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

# SMTP 연결 타임아웃 설정 (단위: 밀리초)
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:mariadb://pillution-database.ct0yku6e878k.ap-northeast-2.rds.amazonaws.com:3306/pillution?serverTimezone=UTC&characterEncoding=UTF-8
#spring.datasource.url=jdbc:log4jdbc:mariadb://shop-database.c5kusk0eqd5l.ap-northeast-2.rds.amazonaws.com:3306/shop_social?serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=12345678

# HikariCP는 최대 10개의 데이터베이스 연결을 관리
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.validation-timeout=5000

#### JPA
#Hibernate는 MariaDB 데이터베이스에 최적화된 데이터베이스 작업을 수행
spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect
# Entity create mode
spring.jpa.hibernate.ddl-auto=update

# Hibernate sql show
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# log display format
logging.pattern.level=%highlight(%-5level)
spring.output.ansi.enabled=ALWAYS
log display format
# 로그 패턴 설정[수정]
# spring.output.ansi.enabled=ALWAYS
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %msg%n%ex

# SQL debug
# SQL
logging.level.jdbc.resultset=error
logging.level.jdbc.audit=info
# 시큐리티 로그
logging.level.org.springframework.security=DEBUG

spring.servlet.multipart.enabled=true
#spring.servlet.multipart.location=C:\\upload

# 프로젝트 내부에 만든 upload 폴더에 파일이 업로드 됨.
spring.servlet.multipart.location=upload/

# 클라우드타입 배포시 업로드 폴더
#spring.servlet.multipart.location=/app/build/libs/upload

spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.max-file-size=20MB

## 파일 업로드 경로
# 1. 로컬 서버 파일이 업로드 되어 있는 경로
itemImgLocation=/home/ec2-user/pillution/student_backend/build/libs/upload/item
uploadPath=file:///home/ec2-user/pillution/student_backend/build/libs/upload
# 2. AWS File Upload Path
#com.javalab.boot.upload.path=/home/ec2-user/shop/upload
# 3. 클라우드 배포시 업로드 경로 변수
#com.javalab.boot.upload.path=/app/build/libs/upload

# 어플리케이션의 url 요청과 매핑되어 있는 핸들러 정보 display
logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.security=trace
logging.level.org.springframework.web.servlet.mvc.method.annotation=TRACE

# 기본 batch size 설정, 주문이 5건이면 일반적으로 5번의 주문 아이템에 대한 조회 쿼리가 발생합니다.
# 이때 batch size를 1000으로 설정하면 5번의 조회 쿼리 대신 1번의 조회 쿼리로 처리할 수 있습니다.
# 이렇게 설정하면 성능이 향상됩니다. 예를들면 in 쿼리로 처리됩니다. in (1,2,3,4,5)
spring.jpa.properties.hibernate.default_batch_fetch_size=10

# Redis 설정
# Redis 서버의 호스트 주소 (로컬에서 실행 중인 Redis 사용)
spring.data.redis.host=localhost
# Redis 서버의 포트 번호 (기본값: 6379)
spring.data.redis.port=6379
# Redis 서버 접속 시 필요한 비밀번호 (설정되지 않은 경우 빈 값)
spring.data.redis.password=ezen12345
# Redis 연결 타임아웃 (밀리초 단위, 6000ms = 6초)
spring.data.redis.timeout=6000


## kakao social login 사용자를 카카오 인증 서버로 리다이렉트하기 위한 초기 단계를 구성 ##
# 1. 사용자가 우리 로그인 페이지에서 <a href="/oauth2/authorization/kakao">KAKAO</a> 클릭
# 2. 스프링 시큐리티 OAuth2 가 1.번 요청을 가로채서 사용자를 카카오의 인증 URI로 설정된
#   https://kauth.kakao.com/oauth/authorize로 리디렉트 시킨다.
# 3. 카카오는 다시 사용자의 카카오 소셜 로그인 인증 여부에 따라서 사용자를
#    https://accounts.kakao.com/login 페이지로 리디렉트 시킨다. 만약 카카오 소셜로그인 인증이
#    이미 있는 경우에는 바로 인가코드를 우리 서버로 전달한다.
# 4. 사용자가 카카오 소셜로그인 화면에서 아이디와 비밀번호를 입력하고 로그인 버튼을 누르면
#   우리 서버와 카카오 서버간의 인증 절차가 시작된다.
# 4.1. 카카오 인증 서버는 우리 앱에 설정한 client-id를 확인하고 인가코드를 전달해준다.
#   인가코드는 우리가 설정해놓은 Redirect Url(http://localhost:8080/login/oauth2/code/kakao)로 전달된다.
# 4.2. 4.1.에서 받은 인가코드와 우리가 설정해놓은 client-secret 키를 카카오의 인증서버인
#   https://kauth.kakao.com/oauth/token 에 액세스 토큰을 요청하고 카카오 인증 서버가 액세스 토큰을 반환.
# 5. Spring Security가 액세스 토큰을 사용해 https://kapi.kakao.com/v2/user/me에서 사용자 정보를 요청.
# 6. 사용자 정보를 가져와 인증 객체 생성 및 스프링 컨텍스트에 저장.
# 7. 사용자가 로그인 후 리디렉션 설정에 따라 적절한 페이지로 이동
# 카카오는 스프링 시큐리티에게 인증 코드를 전달한다.
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.user-name-attribute=id
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.registration.kakao.client-name=kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code

## 카카오 소셜 로그인
# 1. 소셜 로그인 로컬 서버 - 로그인 성공후 "인가코드"가 리디렉션될 주소(카카오 소셜 로그인을 로컬에서 사용)
spring.security.oauth2.client.registration.kakao.redirect-uri=http://43.202.198.161:8080/login/oauth2/code/kakao
# 2. 소셜 로그인(클라우드타입 배포시 사용)
#spring.security.oauth2.client.registration.kakao.redirect_uri=https://port-0-chap10-shopping-static-7xwyjq992lliwmu004.sel4.cloudtype.app/login/oauth2/code/kakao
#3. 소셜 로그인(AWS 배포시 사용)
#spring.security.oauth2.client.registration.kakao.redirect_uri=http://ec2-54-180-123-29.ap-northeast-2.compute.amazonaws.com:8080/login/oauth2/code/kakao

# REST API 키(인가 코드 발급시 필요)
spring.security.oauth2.client.registration.kakao.client-id=f57be72d3c49af75d43b0fefd1ce8235
# 인가코드와 이 비밀키를 이옹해서 액세스 토큰을 발급받는다. 액세스 토큰이 있어야 카카오 사용자 정보 조회 가능
spring.security.oauth2.client.registration.kakao.client-secret=hn6bBKP7z0MjGFWudXTeHWLbgbMZPc9s
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email

# JWT 설정
jwt.issuer=ajufresh@gmail.com
# jwt 만들고/파싱할때 사용할 키로 사용자가 임의로 설정할 수 있다. 이 키를 설정함으로 인해서 암/복호화시 해킹을 방지할 수 있다.
jwt.secret_key=study-springboot
#jwt.expiration_time=86400000


# 포트원(PortOne) 결제 API 설정
# 상점 UID(리액트 환경설정 파일일 .env에 설정되어 있음)
portone.merchant-uid=imp66331315
# 포트원 결제 REST API URL
portone.api-key=3200443332113774
# 포트원 결제 API를 사용하기 위한 API 비밀키
portone.api-secret=zH3hT3ZudlagOhf0hkMhr8tozPHtPWZ6TBWQ7Icp8ntuU9gJFROSyPob4wzoOkLVhtECILPfHggRVldO

# 어플리케이션의 url 요청과 매핑되어 있는 핸들러 정보 display
logging.level.com.javalab.student=DEBUG

# CORS 설정
spring.mvc.cors.allowed-origins=http://43.202.198.161:3000
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
spring.mvc.cors.allowed-headers=*
spring.mvc.cors.allow-credentials=true
